Cache
========================================================

.. image:: images/cache.png

将数据分散到数据库的各个分区上，可以提高性能，但如果某个分区上有热门数据，那么该分区的流量会很多，而其他分区得不到利用。但如果有cache的话，热门数据会被缓存起来，就不会遇到这种问题。缓存能吸收不平衡的负载，以及流量高峰。

- 客户端缓存。操作系统、浏览器上的缓存。
- CDN
- web服务器缓存。反向代理和Varnish这样的缓存，可以缓存web服务器的内容。
- 数据库缓存。例如缓存SQL语句，或SQL查询出的object。 


应用层缓存
------------------------------------
诸如memcachd、redis之类的内存缓存，是存在于存储(数据库)与应用之间的key-value存储。

Redis的额外功能：

- 永久存储选项
- 内置数据结构(有序set、链表)

数据库的缓存可以有很多层，大体上分为“数据库查询缓存”和“object缓存”两种：

- Row level：缓存表的行
- Query-level：缓存SQL查询的结果
- Fully-formed serializable objects：缓存可序列化的object
- Fully-rendered HTML：缓存解析后的html

一般来说，应当避免用文件来做缓存，因为会让cloning and auto-scaling更加困难。

缓存数据库查询
+++++++++++++++++++++++++++++
查询数据库时，将查询语句hash为key，将查询结果存储到缓存里。此方法有过期的问题：

- 很难删除复杂查询的缓存
- 如果一个单元格发生变化，整个可能包含该单元格的缓存结果都要删除

缓存object
+++++++++++++++++++++++++++++
将数据视为object，就像代码里的一样。在你的应用里组装出object并缓存。如果数据变化，就把object从缓存里删除；允许异步处理：设置worker来负责组装object

你可能要缓存的东西
+++++++++++++++++++++++++++++
- 用户session
- 完全渲染后的web页面
- 活动流(activity stream，比如SNS上用户发布的一系列post)
- 用户的图像信息(头像等)

缓存更新测略
+++++++++++++++++++++++++++++
cache-aside
~~~~~~~~~~~~~~~~~~~~~~

.. image:: images/cache-aside.png

程序负责负责从storage读写，cache不直接与storage交互。应用需要数据时，先试图从缓存中读取，如果读不到，就从数据库读取，并写入缓存。memcached一般是这样使用的。cache-aside也叫lazy-loading。

缺点：

- cache miss会导致一点延迟(不过比起数据库读取而言，微不足道)
- 若数据库里的数据变化(例如手动用SQL修改)，缓存可能会过时。可以设置TTL(time to live)，强制缓存在一段时间后过时，来减轻此问题。但如果缓存并未过时，而TTL已到，就会引起不必要的数据库读取操作。
- 当一个缓存节点崩溃后，只能用一个新的空节点来替代，这意味着我们需要重新装入缓存，增加了延迟。

Write-through
~~~~~~~~~~~~~~~~~~~~~~
应用将cache当作存储设备，而cache系统负责数据库的读写操作。cache系统写入数据时，不仅写入缓存，也写入数据库，之后才返回结果给用户::

	def set_user(user_id, values):
		user = db.query("UPDATE Users WHERE id = {0}", user_id, values)
		cache.set(user_id, user)

write-through策略的写入性能较差，但一旦写入，后续的读操作都很快(用户在写入数据时通常容忍度更高一些)。由于只能通过缓存系统来读写数据库，因此缓存中的数据都是最新的。

缺点：写入性能差。优点：一旦用户收到应用返回的写入成功的消息，数据已经被写入到数据库，即使断电也不怕丢失了。

Write-behind(back)
~~~~~~~~~~~~~~~~~~~~~~
用户提出写入请求后，缓存系统将数据写入缓存，添加一个“数据库写入任务”到消息队列，之后就返回成功。由分别的worker从消息队列获取任务并处理。数据库的写入操作是异步的。

缺点：

- 若数据库写入还没完成，而缓存先崩溃了，可能导致数据丢失。

Refresh-ahead
~~~~~~~~~~~~~~~~~~~~~~
在cache项过期之前，刷新一下。


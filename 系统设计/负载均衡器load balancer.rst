Load balancer
====================================================

.. image:: images/load-balancer.png

负载均衡器将传入的用户请求分发给计算资源(例如应用服务器、数据库)，并将返回的结果发给合适的client。负载均衡器可以用硬件实现(昂贵)，也可以用HAProxy、LVS这样的软件实现。负载均衡器能有效：

- 阻止请求流向故障服务器
- 防止服务器过载
- 帮助消除单点故障

其他好处：

- SSL终结(SSL termination)：在负载均衡器服务器上，解密传入的请求，并加密传出的回复，这样后台的服务器就不需要处理这些操作；不需要在每个后端服务器上安装证书。
- Session持久性(Session persistence)：发行cookie；若开启Sticky Session，总是将特定用户的请求转发给同样的服务器。

为防止故障，设置多个负载均衡器(load balancer)是很常见的，不管是active-passive模式，还是active-active模式。

负载均衡器可以用多种策略，将流量发给后台服务器：

- 随机
- 最小负载
- Session/Cookie
- 轮流、带权重的轮流(Round robin or weighted round robin)
- Layer 4
- Layer 7

轮流、带权重的轮流
--------------------------------------
轮流算法(round-robin)是个简单但有效的方法，可将请求分发给单一入口后面的多个服务器，见于DNS服务器、p2p网络、其他多节点集群/网络。简单来说，轮流算法将传入的请求轮流发给一个列表中的服务器。严格来说，它并不能产生完美均衡的负载分配。

比起轮流算法，带权重的轮流算法(Weighted round-robin)提供了一个更好的方法来分配负载。此算法中，每个目标(后台服务器)都被分到一个值，表示相对于其他服务器，此服务器表现如何。这个权值决定了接下来应该发送多少请求给此服务器，是更多，还是更少。

假设你有3台服务器，对它们做benchmark：第1台每秒能处理100个请求，第2个300个，第3个只有25个。一般情况下，由于性能差距如此大，第3个服务器应当从集群中剔除，但有了带权重的轮流算法，就可以只给服务器分配它能处理的量的请求。三者的权重分别为：

- server1.fqdn      4
- server2.fqdn      12
- server3.fqdn      1

接下来的用户请求，12个发给server2，4个给server1，1个给server3。

总之，带权重的轮流算法(Weighted round-robin)跟轮流算法(round-robin)相似，但给权重更高的节点分配更多的请求。一段时间后，节点们得到请求的相对比例，大约等于权重的比例。

Layer 4 load balancing
--------------------------------------
OSI模型的Layer 4即传输层。四层负载均衡器查看传输层的信息，来决定如何分发请求。一般查看数据段或数据报(segment或datagram)的源IP、目的IP、header中的端口，但不包括其中的内容。四层负载均衡器从上游服务器转发数据，将数据转发给上游服务器，使用NAT(Network Address Translation)方法。

nginx的四层负载均衡
+++++++++++++++++++++++++++
https://www.nginx.com/resources/glossary/layer-4-load-balancing/

用户通过域名从DNS查询到负载均衡器的IP，并将请求发给它。四层负载均衡器接收请求，根据设置的策略决定将包发给哪个服务器，并对数据包做NAT：将目的IP从负载均衡器自己的IP改为被选中的服务器的IP；将服务器的回复发给客户端之前，将数据包的源IP改为负载均衡器的IP。(有时包的源端口、目标端口也会变化)。

四层负载均衡器仅根据TCP流中前几个数据包中的地址信息来做决定，并不查看包的内容。四层负载均衡器常常是一个专用的硬件，NAT操作也可能是硬件完成的。

四层负载均衡曾经是一个很流行的架构方案，当时商用硬件还不像现在这样强大，服务器与客户端之间的交互也没那么复杂。比起七层负载均衡，它需要更少的算力，但如今CPU和内存既快又便宜，四层负载均衡的性能优势变得微不足道了。

Layer 7 load balancing
--------------------------------------
七层负载均衡器运行在OSI模型的最高层：应用层(Internet上，HTTP协议是本层的主宰)。七层负载均衡器做出的决定基于HTTP头的多种特性，以及消息的内容，例如URL、数据的类型(文本、图片、视频)，或cookie信息。

虽然七层负载均衡器比四层需要更多运算，但它总体上能产生更高的效率。例如，七层负载均衡器可以确定客户端请求的数据类型(视频、文本等)，因此不需要在所有服务器上存放相同的数据，如果用户请求的是视频内容，从视频服务器获取就可以了。

水平扩展
--------------------------------------
负载均衡器有助于水平扩展，提高性能和可用性。使用商业硬件水平扩展，比垂直扩展要便宜，而且可用性高。比起特殊的企业级硬件(s390x等)，商业硬件更容易招人。

水平扩展的缺点：

- 负载均衡器有可能成为性能瓶颈。
- 通过引入负载均衡器来消除单点故障，让系统更加复杂。
- 单个负载均衡器会引入单点故障，设置多个负载均衡器让系统更加复杂。

反向代理Reverse Proxy(Web Server)
====================================================

.. image:: images/Reverse_proxy.png

反向代理是一个web服务器，它集中了内部的服务，并向公众提供一个统一的接口。用户请求被转发到能处理它的服务器上，之后该服务器的回复又被转发给用户。其他作用有：

- 增强的安全性：可以隐藏后台服务器信息，IP黑名单，限制每个用户的连接等
- 增强的可扩展性和灵活性：客户端仅能看到反向代理的IP，这允许你横向扩展服务器，或改变它们的配置。
- SSL终结：反向代理能解密传入的请求，加密传出的回复。后台服务器不需要进行这些加密/解密操作，且不需要安装相关的证书。
- 压缩：压缩服务器的应答
- 缓存：为已缓存的请求快速返回结果
- 静态内容：可直接提供静态内容(html/css/js、照片、视频、音频等)

反向代理的缺点：

- 引入反向代理，增加了复杂度
- 单个反向代理是单点故障，配置多个反向代理服务器（或者热备）进一步增加了复杂度

负载均衡器 vs 反向代理
====================================================
负载均衡气普遍在以下情况下部署：用户请求太多，单个服务器无法处理，因而需要多个服务器时。部署多个服务器也可以消除一个单点故障，让网站更可靠。最普遍的情况下，所有服务器都提供相同内容的服务，负载均衡器的工作是根据服务器的负载能力，分配负载，阻止服务器出现过载，从而使系统更快地处理客户端的请求。

负载均衡器能减少客户端收到的错误回复。负载均衡器检测到某个服务器挂掉时(截获后台服务器的错误回复)，就把请求发给别的服务器。

负载均衡器还有Stick Session.

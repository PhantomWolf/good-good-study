Reverse Integer
Reverse digits of an integer.
Example1: x = 123, return 321
Example2: x = -123, return -321


Requirements:
Return reversed integer. Keep the sign of x. If overflow, return 0.


Solution:
1.Get the last digit d of x using the % operation.
2.Multiple the previous result with 10 and add d to it.
3.Repeat until x == 0.


Notes:
1.Overflow detection
After the reverse, the result might overflow. For example, 1000000003. So we need to do overflow detection.
We can use minus(-) operation to do overflow detection for addition(+); division(/) for multiplication(*).
    a + b > INT_MAX     ==> a > INT_MAX - b
    a + b < INT_MIN     ==> a < INT_MIN - b
    b > 0, a * b > INT_MAX  ==> a > INT_MAX / b
    b > 0, a * b < INT_MIN  ==> a < INT_MIN / b

2.In this problem, why do we only need to do overflow detection for rev*10, not rev*10 + x%10?
If rev*10 <= INT_MAX and rev*10 + x%10 > INT_MAX, then we need to do overflow detection for the addition operation.
Since rev*10 <= INT_MAX, then rev*10 <=  2147483640. To make it overflow after addition, x%10 must be larger than 7: x%10 > 7. But that's impossible, because x%10 is the highest digit. It can only be 0, 1, 2, otherwise the original number will overflow.

3.Avoid 1 division by comparing with 0.
Since INT_MAX > 0, if rev < 0, then INT_MAX/10 > rev and there's no need to compare INT_MAX/10 with rev. So we only need to compare them when rev > 0. Same for INT_MIN.
This trick can reduce 1 time of division operation.

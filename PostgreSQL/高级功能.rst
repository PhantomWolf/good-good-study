高级功能
=====================================
Transaction事务
-----------------------------
事务将多个操作绑定到一起，要么执行成功，要么什么也不做。一旦事务成功完成，数据库保证这些数据即使系统崩溃也不会丢失。且多个并行执行的事务，不会看到其它事务未完成的修改。::

    BEGIN;
    UPDATE accounts SET balance = balance - 100.00
        WHERE name = 'Alice';
    -- etc etc
    COMMIT;

SAVEPOINT
~~~~~~~~~~~~~~~~~~~~~~~~
可以在事务的途中设置SAVEPOINT，之后可以回退到这些SAVEPOINT，例如::

    BEGIN;
    UPDATE accounts SET balance = balance - 100.00
        WHERE name = 'Alice';
    SAVEPOINT my_savepoint;
    UPDATE accounts SET balance = balance + 100.00
        WHERE name = 'Bob';
    -- oops ... forget that and use Wally's account
    ROLLBACK TO my_savepoint;
    UPDATE accounts SET balance = balance + 100.00
        WHERE name = 'Wally';
    COMMIT;


Window Functions
-----------------------------
窗口函数是对一组值进行操作，不需要使用GROUP BY 子句对数据进行分组，还能够在同一行中同时返回基础行的列和聚合列。举例来说，我们要得到一个年级所有班级所有学生的平均分，按照传统的写法，我们肯定是通过AVG聚合函数来实现求平均分。这样带来的”坏处“是我们不能轻松地返回基础行的列（班级，学生等列），而只能得到聚合列。因为聚合函数的要点就是对一组值进行聚合，以GROUP BY 查询作为操作的上下文，由于GROUP BY 操作对数据进行分组后，查询为每个组只返回一行数据，因此，要限制所有表达式为每个组只返回一个值。而通过窗口函数，基础列和聚合列的查询都轻而易举。

语法：SELECT func(args) OVER () FROM xxx。OVER必须紧跟着窗口函数的名字和参数

我们来看例子。设表中有以下字段

- depname: Text, department name
- empno: Int, employee number
- salary: Int

需求：输出每个记录的depname, empno, salary以及该部门的平均工资。PARTITION BY depname表示将depname相同的记录作为单独的一组来处理，因此avg(salary)求出的是depname相同的记录的平均值::

    SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname) FROM empsalary;

    depname   | empno | salary |          avg
    ----------+-------+--------+-----------------------
    develop   |    11 |   5200 | 5020.0000000000000000
    develop   |     7 |   4200 | 5020.0000000000000000
    develop   |     9 |   4500 | 5020.0000000000000000
    develop   |     8 |   6000 | 5020.0000000000000000
    develop   |    10 |   5200 | 5020.0000000000000000
